// +build !noasm
// Generated by PeachPy 0.2.0 from aez_amd64.py


// func cpuidAMD64(cpuidParams *uint32)
TEXT 路cpuidAMD64(SB),4,$0-8
	MOVQ cpuidParams+0(FP), R15
	MOVL 0(R15), AX
	MOVL 4(R15), CX
	CPUID
	MOVL AX, 0(R15)
	MOVL BX, 4(R15)
	MOVL CX, 8(R15)
	MOVL DX, 12(R15)
	RET

// func xorBytes1x16AMD64SSE2(a *uint8, b *uint8, dst *uint8)
TEXT 路xorBytes1x16AMD64SSE2(SB),4,$0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ dst+16(FP), CX
	MOVOU 0(AX), X0
	MOVOU 0(BX), X1
	PXOR X1, X0
	MOVOU X0, 0(CX)
	RET

// func aes4AMD64AESNI(s *uint8, k *uint8)
TEXT 路aes4AMD64AESNI(SB),4,$0-16
	MOVQ s+0(FP), AX
	MOVQ k+8(FP), BX
	PXOR X0, X0
	MOVOU 0(AX), X1
	MOVOU 0(BX), X2
	MOVOU 16(BX), X3
	MOVOU 32(BX), X4
	AESENC X3, X1
	AESENC X2, X1
	AESENC X4, X1
	AESENC X0, X1
	MOVOU X1, 0(AX)
	RET

// func aes10AMD64AESNI(s *uint8, k *uint8)
TEXT 路aes10AMD64AESNI(SB),4,$0-16
	MOVQ s+0(FP), AX
	MOVQ k+8(FP), BX
	PXOR X15, X15
	MOVOU 0(AX), X0
	MOVOU 0(BX), X1
	MOVOU 16(BX), X2
	MOVOU 32(BX), X3
	AESENC X1, X0
	AESENC X2, X0
	AESENC X3, X0
	AESENC X1, X0
	AESENC X2, X0
	AESENC X3, X0
	AESENC X1, X0
	AESENC X2, X0
	AESENC X3, X0
	AESENC X1, X0
	MOVOU X0, 0(AX)
	RET
